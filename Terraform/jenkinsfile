pipeline {
    agent any

   environment {
    AWS_SHARED_CREDENTIALS_FILE = '/mnt/data/.aws/credentials'
    AWS_CONFIG_FILE             = '/mnt/data/.aws/config'
    AWS_PROFILE                 = 'default'         // Explicitly set this to match your files
    PATH                        = "/mnt/data/bin:${env.PATH}"
}

    parameters {
        string(name: 'action', defaultValue: 'apply', description: 'Terraform action: apply or destroy')
    }

    stages {
        
        stage('Debug AWS Env') {
            steps {
                sh '''
                    echo "Checking AWS environment variables..."
                    echo "AWS_SHARED_CREDENTIALS_FILE=$AWS_SHARED_CREDENTIALS_FILE"
                    echo "AWS_CONFIG_FILE=$AWS_CONFIG_FILE"
                    echo "AWS_PROFILE=$AWS_PROFILE"
                    ls -l $AWS_SHARED_CREDENTIALS_FILE
                    ls -l $AWS_CONFIG_FILE
                '''
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/189preetis/hotstar-kubernetes.git'
            }
        }

        stage('Terraform version') {
            steps {
                sh 'terraform --version'
            }
        }

        stage('Terraform init') {
            steps {
                dir('Terraform') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform validate') {
            steps {
                dir('Terraform') {
                    sh 'terraform validate'
                }
            }
        }

        stage('Terraform plan') {
            steps {
                dir('Terraform') {
                    sh 'terraform plan'
                }
            }
        }

        stage('Terraform apply/destroy') {
            steps {
                dir('Terraform') {
                    sh 'terraform ${action} --auto-approve'
                }
            }
        }
    }

    post {
        success {
            echo '✅ Terraform execution completed successfully!'
        }
        failure {
            echo '❌ Terraform execution failed! Check the logs.'
        }
    }
}
